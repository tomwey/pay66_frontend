<template>
  <div class="list-wrapper" v-loading="loading">
    <div class="title-bar">
      <h3 class="title">课程单元</h3>
      <div class="buttons">
        <el-button type="primary" @click="openForm">添加课程单元</el-button>
      </div>
    </div>
    <search-controls :controls="searchControls" @search="loadData"></search-controls>
    <div class="list">
      <el-table
        :data="list"
        fit
        stripe
        style="width: 100%"
        @selection-change="handleSelectionChange"
      >
        <el-table-column type="selection" width="55" align="center"></el-table-column>
        <el-table-column label="ID" prop="id" align="center" width="80"></el-table-column>
        <el-table-column label="名称" prop="name" align="center" width="120"></el-table-column>
        <el-table-column label="简介" prop="intro" align="center" width="120"></el-table-column>
        <el-table-column label="上课时长(分钟)" prop="teach_length" align="center" width="120"></el-table-column>
        <el-table-column label="备注" prop="memo" align="center" width="150"></el-table-column>
        <el-table-column label="状态" align="center" width="120">
          <template slot-scope="scope">
            <state-tag
              :type="scope.row.opened ? 'success' : 'danger'"
              :label="scope.row.opened ? '已上架' : '已下架'"
            ></state-tag>
          </template>
        </el-table-column>
        <el-table-column label="创建时间" prop="create_time" width="99"></el-table-column>
        <el-table-column label="操作" fixed="right" align="center" width="240">
          <template slot-scope="scope">
            <el-button size="mini" style="margin-bottom: 10px;" @click="editItem(scope.row);">编辑</el-button>
            <el-button
              size="mini"
              type="danger"
              style="margin-bottom: 10px;"
              @click="deleteItem(scope.row);"
            >删除</el-button>
            <el-button
              size="mini"
              type="warning"
              v-if="scope.row.opened"
              @click="openItem(scope.row, false);"
            >下架</el-button>
            <el-button
              size="mini"
              type="success"
              v-if="!scope.row.opened"
              @click="openItem(scope.row, true);"
            >上架</el-button>
          </template>
        </el-table-column>
      </el-table>
    </div>
    <div class="bottom-bar">
      <div class="page-container">
        <span class="total">共{{pager.totalSize}}条</span>
        <el-pagination
          background
          layout="prev, pager, next"
          :total="pager.totalSize"
          :page-size="pager.pageSize"
          :current-page="pager.page"
          @current-change="pager.changeFunc"
        ></el-pagination>
      </div>
    </div>
    <!-- 表单 -->
    <el-dialog
      :title="isAdd ? '添加课程单元' : '修改课程单元'"
      :visible.sync="isShow"
      width="580px"
      :append-to-body="true"
      :close-on-click-modal="false"
      :close-on-press-escape="false"
      @open="openModel"
      center
    >
      <comm-form :controls="controls" ref="commForm" :form-data="formData"></comm-form>
      <div class="unit-contents">
        <h3 class="title">课程单元内容</h3>
        <span class="add-content-btn" @click="addContentForm">
          <i class="el-icon-circle-plus-outline"></i>添加内容
        </span>
        <div class="content-form" v-for="(form,index) in contentForms" :key="index">
          <span class="delete-btn" @click="deleteContentForm(index)">
            <i class="el-icon-remove-outline"></i>
          </span>
          <comm-form :controls="controls2" :ref="'form' + index" :form-data="form.formData"></comm-form>
        </div>
      </div>
      <div slot="footer" class="dialog-footer">
        <el-button @click="isShow = false">取 消</el-button>
        <el-button type="primary" v-loading="commiting" @click="commit">提 交</el-button>
      </div>
    </el-dialog>
  </div>
</template>
<script>
export default {
  name: "tags",
  components: {
    commForm: resolve => require(["@/components/CommForm"], resolve),
    stateTag: resolve => require(["@/components/state-tag"], resolve),
    searchControls: resolve => require(["@/components/SearchControls"], resolve)
  },
  data() {
    return {
      loading: false,
      commiting: false,
      list: [],
      isAdd: false,
      isShow: false,
      conds: [],
      searchControls: [
        {
          type: 1,
          label: "关键字",
          placeholder: "输入名字、简介",
          field: "name,intro",
          op: "kw"
        },
        {
          type: 1,
          label: "单元编号",
          field: "id"
        },
        {
          type: 2,
          label: "上架状态",
          field: "state",
          options: [
            {
              label: "全部",
              value: "-1"
            },
            {
              label: "已上架",
              value: 1
            },
            {
              label: "已下架",
              value: 0
            }
          ],
          key: "opened"
        },
        {
          type: 72,
          label: "创建时间",
          field: "created_at"
        }
      ],
      pager: {
        totalSize: 0,
        pageSize: 20,
        page: 1,
        changeFunc: val => {
          this.pager.page = val;
          this.loadData(this.conds);
        }
      },
      controls2: [
        {
          label: "内容名称",
          field: "name",
          type: 1,
          rules: [
            { required: true, message: "内容名称不能为空", trigger: "blur" }
          ]
        },
        {
          label: "内容类型",
          field: "_type",
          type: 3,
          options: [
            {
              label: "课件",
              value: 1
            },
            {
              label: "作业",
              value: 2
            },
            {
              label: "演示视频",
              value: 3
            },
            {
              label: "教学视频",
              value: 4
            },
            {
              label: "其他",
              value: 5
            }
          ],
          rules: [
            { required: true, message: "内容类型不能为空", trigger: "change" }
          ]
        },
        {
          label: "内容大小",
          field: "size",
          type: 1,
          subtype: "number",
          unit: "字节"
        },
        {
          label: "备注",
          field: "memo",
          type: 1,
          rules: []
        }
      ],
      formData2: {},
      controls: [
        {
          label: "名字",
          field: "name",
          type: 1,
          rules: [{ required: true, message: "名字不能为空", trigger: "blur" }]
        },
        {
          label: "简介",
          field: "intro",
          type: 1,
          rules: [{ required: true, message: "简介不能为空", trigger: "blur" }]
        },
        {
          label: "上课时长(分钟)",
          field: "teach_length",
          type: 1,
          subtype: "number",
          unit: "分钟",
          rules: [
            { required: true, message: "上课时长不能为空", trigger: "blur" }
          ]
        },
        {
          label: "备注",
          field: "memo",
          type: 1,
          rules: []
        }
      ],
      formData: {},
      contentForms: [
        {
          formData: {}
        }
      ]
    };
  },
  watch: {},
  mounted() {
    this.loadData([]);
  },
  methods: {
    addContentForm() {
      this.contentForms.push({ formData: {} });
    },
    deleteContentForm(index) {
      if (this.contentForms.length > 1) {
        this.contentForms.splice(index, 1);
      } else {
        this.$message({
          type: "warning",
          message: "至少需要1个单元内容"
        });
      }
    },
    loadData(conds) {
      this.conds = conds || [];
      this.loading = true;
      let params = {};
      params.page = this.pager.page;
      params.size = this.pager.pageSize;

      if (this.conds.length > 0) {
        params.conds = JSON.stringify(this.conds);
      }

      this.$get("admin/common/course_unit/list", params, res => {
        // console.log(res);
        this.loading = false;
        if (res.code == 0) {
          this.list = res.data;
          this.pager.totalSize = res.total || 0;
        }
      });
      // console.log(this.pager.page);
    },
    search() {
      this.loadData();
    },
    handleSelectionChange(rows) {},
    openForm(type) {
      this.formData = {};
      this.isAdd = true;
      this.isShow = true;
    },
    openModel() {
      // this.$refs.commForm.clearValidates();
      this.$refs.commForm && this.$refs.commForm.clearValidates();
    },
    editItem(item) {
      this.formData = Object.assign({}, item);
      this.isAdd = false;
      this.isShow = true;
    },
    deleteItem(item) {
      this.$confirm("删除后不能恢复，您确定吗？", "删除提示", {
        confirmButtonText: "确定",
        cancelButtonText: "取消",
        type: "warning"
      })
        .then(() => {
          this.loading = true;
          this.$post(
            "admin/common/course_unit/delete",
            { ids: item.id },
            res => {
              this.loading = false;
              if (res.code == 0) {
                this.$message({
                  type: "success",
                  message: "删除成功"
                });
                this.list.splice(this.list.indexOf(item), 1);
                this.pager.totalSize -= 1;
              }
            }
          );
        })
        .catch();
    },
    openItem(item, flag) {
      this.loading = true;
      this.$post(
        "admin/common/course_unit/open_or_close",
        { ids: item.id, state: flag ? 1 : 0 },
        res => {
          this.loading = false;
          if (res.code == 0) {
            item.opened = flag;
          }
        }
      );
    },
    commit() {
      this.$refs.commForm.validateFields(valid => {
        if (valid) {
          this.doCommit();
        }
      });
    },
    doCommit() {
      this.commiting = true;
      this.$post(
        "admin/common/course_unit/save",
        {
          id: this.formData.id,
          payload: JSON.stringify(this.formData)
        },
        res => {
          this.commiting = false;
          if (res.code == 0) {
            this.isShow = false;
            this.$message({
              type: "success",
              message: "提交成功！"
            });
            this.loadData();
          }
        }
      );
    }
  }
};
</script>
<style lang="scss" scoped>
.unit-contents {
  // border: 1px dashed #ccc;
  position: relative;
  .add-content-btn {
    display: inline-block;
    position: absolute;
    right: -8px;
    top: -10px;
    font-size: 14px;
    line-height: 14px;
    padding: 10px;
    cursor: pointer;
    user-select: none;
    color: #409eff;
    i {
      vertical-align: -2px;
      margin-right: 5px;
      font-size: 18px;
    }
  }
  .title {
    text-align: center;
    font-size: 16px;
    color: #333;
    font-weight: normal;
  }
  .content-form {
    padding: 20px 60px 5px 0;
    background: rgb(247, 248, 249);
    position: relative;
    .delete-btn {
      display: inline-block;
      // font-size: 18px;
      padding: 10px;
      position: absolute;
      right: 0;
      top: 13px;
      cursor: pointer;
      user-select: none;
      i {
        font-size: 24px;
        color: #f56c6c;
      }
    }
  }
}
</style>


